From 932a350db2cdbf44042c86913c2deb79e5d12805 Mon Sep 17 00:00:00 2001
From: Henrik Bohnenkamp <hbohnenkamp@united-internet.de>
Date: Wed, 20 Jun 2018 18:22:40 +0200
Subject: [PATCH 2/2] Adding mdb_get_aliases function to dn2id.c replacing
 mdb_idscope

The new function mdb_get_aliases in dn2id.c is a replacement of
mdb_idscope and therefore returns the IDs of aliases in a given search
scope (curscop). The function implements a tree traversal of the
search scope. The code is is copied from mdb_dn2id_walk, and relevant
modifications applied: while mdb_dn2id_walk is an one-step iterator
function to control the tree traversal from outside, mdb_get_aliases
puts the code of mdb_dn2id_walk in a outer for(;;) loop.  IDs of
aliases are identified by looking up the naliases entry in the dn2id
DB. Optimzations are imaginable (pruning subtrees with no aliases from
the traversal) but not implemted here yet.

The naliases entry of the search root id is exploited like this:

- if naliases == 0, mdb_get_aliases returns immediatly with empty
  curscop

- if 0 < naliases < MDB_IDL_DB_SIZE then mdb_get_aliases conducts the
  described tree traversal collecting all aliases and returning them
  in curscop.

- if naliases > MDB_IDL_DB_SIZE and scope=sub, mdb_get_aliases returns
  the IDL range for aliases retreived from the objectClass index. This
  is essentially the same behavior as implemented in mdb_idscope, only
  that it takes orders of magnitude fewer CPU cycles to get there.

LEGAL MATTER:

The attached patch file is derived from OpenLDAP Software. All of the
modifications to OpenLDAP Software represented in the following
patch(es) were developed by Henrik Bohnenkamp,
hbohnenkamp@united-internet.de. I have not assigned rights and/or
interest in this work to any party.

I, Henrik Bohnenkamp, hereby place the following modifications to
OpenLDAP Software (and only these modifications) into the public
domain. Hence, these modifications may be freely used and/or
redistributed for any purpose with or without attribution and/or other
notice.
---
 servers/slapd/back-mdb/dn2id.c     | 165 +++++++++++++++++++++++++++++
 servers/slapd/back-mdb/proto-mdb.h |   8 ++
 servers/slapd/back-mdb/search.c    |   2 +-
 3 files changed, 174 insertions(+), 1 deletion(-)

diff --git a/servers/slapd/back-mdb/dn2id.c b/servers/slapd/back-mdb/dn2id.c
index 6c845b6b0..bccadcd86 100644
--- a/servers/slapd/back-mdb/dn2id.c
+++ b/servers/slapd/back-mdb/dn2id.c
@@ -51,6 +51,23 @@ typedef struct diskNode {
 	/* unsigned char nsubs[sizeof(ID)];	in child nodes only */
 } diskNode;
 
+static int
+mdb_get_naliases(MDB_val*  data, ID *naliases)
+{
+	char* ptr;
+	ptr = data->mv_data + data->mv_size - 2 * sizeof(ID);
+	memcpy( naliases, ptr, sizeof(ID));
+	return 0;
+}
+
+static int
+mdb_get_parent_id(MDB_val *data, ID *id){
+	char* ptr;
+	ptr = data->mv_data  + data->mv_size - sizeof(ID);
+	memcpy( id, ptr, sizeof(ID) );
+	return 0;
+}
+
 /* Sort function for the sorted duplicate data items of a dn2id key.
  * Sorts based on normalized RDN, in length order.
  */
@@ -1017,3 +1034,151 @@ void mdb_dn2id_wrestore (
 		isc->rdns[n].bv_val = d->nrdn+isc->nrdns[n].bv_len+1;
 	}
 }
+
+int
+mdb_get_aliases(
+	Operation *op,
+	MDB_txn	*txn,
+	ID e_id,
+	ID *ids,
+	ID *res
+	 )
+{
+	int rc, n;
+	ID2 *scopes;
+
+	struct mdb_info *mdb = (struct mdb_info *) op->o_bd->be_private;
+	MDB_dbi dbi = mdb->mi_dn2id;
+	MDB_cursor *cursor;
+
+	ID id = e_id;
+	ID nsubs, naliases, found_aliases = 0;
+	int oscope, nscope, numrdns = 0;
+	MDB_val key, data;
+	char *ptr;
+	diskNode *d;
+	struct berval rdns[MAXRDNS];
+	struct berval nrdns[MAXRDNS];
+
+	rc = mdb_cursor_open( txn, dbi, &cursor );
+	if ( rc ) return rc;
+	scopes = ch_malloc( MDB_idl_um_size * sizeof( ID2 ));
+	numrdns = 0;
+
+	MDB_IDL_ZERO( res );
+
+	oscope = op->oq_search.rs_scope;
+
+	key.mv_data = &id;
+	key.mv_size = sizeof(ID);
+
+	rc = mdb_cursor_get( cursor, &key, &data, MDB_SET );
+	rc = mdb_get_naliases(&data, &naliases);
+	if ( !naliases)
+		goto done;
+
+	if (oscope == LDAP_SCOPE_SUBTREE && naliases > MDB_idl_db_size-1){
+		MDB_IDL_RANGE( res, MDB_IDL_FIRST( ids ), MDB_IDL_LAST( ids ));
+		goto done;
+	}
+
+	scopes[0].mid = id;
+	numrdns++;
+	nscope = 0;
+
+	for (;;){ // until bored
+		for (;;) {
+			/* Get next sibling */
+			rc = mdb_cursor_get( cursor, &key, &data, MDB_NEXT_DUP );
+			if ( !rc ) {
+				ptr = (char *)data.mv_data + data.mv_size - 2*sizeof(ID);
+				d = data.mv_data;
+				memcpy( &id, ptr, sizeof(ID));
+
+				/* If we're pushing down, see if there's any children to find */
+				if ( nscope || oscope == LDAP_SCOPE_ONELEVEL ) {
+					ptr += sizeof(ID);
+					memcpy( &nsubs, ptr, sizeof(ID));
+					/* No children, go to next sibling */
+					if ( nsubs < 2 ){
+						// check for aliases
+						ID na;
+						MDB_val tkey, tdata;
+						tkey.mv_size = sizeof(ID);
+						tkey.mv_data = &id;
+						mdb_cursor_get( cursor, &tkey, &tdata, MDB_SET );
+						rc = mdb_get_naliases(&tdata, &na);
+						if (na){
+							assert(na == 1);
+							found_aliases++;
+							if ( res[0] >= MDB_idl_db_size-1 ) {
+								/* too many aliases in scope. Fallback to range */
+								MDB_IDL_RANGE( res, MDB_IDL_FIRST( ids ), MDB_IDL_LAST( ids ));
+								goto done;
+							}
+							res[0]++;
+							res[res[0]] = id;
+						}
+						mdb_cursor_get( cursor, &key, &data, MDB_GET_BOTH );
+						continue; // inner for loop
+					}
+				}
+				n = numrdns;
+				scopes[n].mid = id;
+				n--;
+				nrdns[n].bv_len = ((d->nrdnlen[0] & 0x7f) << 8) | d->nrdnlen[1];
+				nrdns[n].bv_val = d->nrdn;
+				rdns[n].bv_val = d->nrdn+nrdns[n].bv_len+1;
+				rdns[n].bv_len = data.mv_size - sizeof(diskNode) - nrdns[n].bv_len;
+				/* return this ID to caller */
+				if ( !nscope )
+					break;
+				/* push down to child */
+				key.mv_data = &id;
+				mdb_cursor_get( cursor, &key, &data, MDB_SET );
+				nscope = 0;
+				numrdns++;
+				continue;
+			} else if ( rc == MDB_NOTFOUND ) {
+				if ( !nscope && oscope != LDAP_SCOPE_ONELEVEL ) {
+					/* reset to first dup */
+					mdb_cursor_get( cursor, &key, NULL, MDB_GET_CURRENT );
+					mdb_cursor_get( cursor, &key, &data, MDB_SET );
+					nscope = 1;
+					continue;
+				} else {
+					numrdns--;
+					/* stack is empty? */
+					if ( !numrdns )
+						break;
+					/* pop up to prev node */
+					n = numrdns - 1;
+					key.mv_data = &scopes[n].mid;
+					key.mv_size = sizeof(ID);
+					data.mv_data = nrdns[n].bv_val - 2;
+					data.mv_size = 1;	/* just needs to be non-zero, mdb_dup_compare doesn't care */
+					mdb_cursor_get( cursor, &key, &data, MDB_GET_BOTH );
+					continue;
+				}
+			} else {
+				break;
+			}
+		}
+		if (!numrdns)
+			break; // bored now
+	}
+
+done:
+/*
+  if (MDB_IDL_IS_RANGE(res)){
+		printf("returning range: %lu %lu\n", res[1], res[2]);
+	} else {
+		assert(found_aliases == naliases);
+		if (naliases)
+			printf("found %lu naliases\n", naliases);
+	}
+*/
+	mdb_cursor_close(cursor);
+	ch_free( scopes );
+	return LDAP_SUCCESS;
+}
diff --git a/servers/slapd/back-mdb/proto-mdb.h b/servers/slapd/back-mdb/proto-mdb.h
index 52213aa67..7e5a60da1 100644
--- a/servers/slapd/back-mdb/proto-mdb.h
+++ b/servers/slapd/back-mdb/proto-mdb.h
@@ -162,6 +162,14 @@ void mdb_dn2id_wrestore(
 	Operation *op,
 	struct IdScopes *isc );
 
+int
+mdb_get_aliases(
+	Operation *op,
+	MDB_txn	*txn,
+	ID e_id,
+	ID *ids,
+	ID *res	);
+
 MDB_cmp_func mdb_dup_compare;
 
 /*
diff --git a/servers/slapd/back-mdb/search.c b/servers/slapd/back-mdb/search.c
index a3f481be3..ac8622564 100644
--- a/servers/slapd/back-mdb/search.c
+++ b/servers/slapd/back-mdb/search.c
@@ -174,7 +174,7 @@ static int search_aliases(
 		/* Set curscop to only the aliases in the current scope. Start with
 		 * all the aliases, then get the intersection with the scope.
 		 */
-		rs->sr_err = mdb_idscope( op, isc->mt, e_id, aliases, curscop );
+		rs->sr_err = mdb_get_aliases(op, isc->mt, e_id, aliases, curscop);
 
 		/* Dereference all of the aliases in the current scope. */
 		cursora = 0;
-- 
2.17.1

