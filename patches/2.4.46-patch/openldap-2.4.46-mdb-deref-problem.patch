diff --git a/servers/slapd/back-mdb/add.c b/servers/slapd/back-mdb/add.c
index a5ccc3b54..494a2a821 100644
--- a/servers/slapd/back-mdb/add.c
+++ b/servers/slapd/back-mdb/add.c
@@ -154,7 +154,8 @@ txnReturn:
 	}
 
 	/* get entry or parent */
-	rs->sr_err = mdb_dn2entry( op, txn, mcd, &op->ora_e->e_nname, &p, NULL, 1 );
+	rs->sr_err = mdb_dn2entry( op, txn, mcd, &op->ora_e->e_nname, &p, NULL,
+                               NULL, 1 );
 	switch( rs->sr_err ) {
 	case 0:
 		rs->sr_err = LDAP_ALREADY_EXISTS;
@@ -339,7 +340,8 @@ txnReturn:
 	op->ora_e->e_id = eid;
 
 	/* dn2id index */
-	rs->sr_err = mdb_dn2id_add( op, mcd, mcd, pid, 1, 1, op->ora_e );
+	rs->sr_err = mdb_dn2id_add( op, mcd, mcd, pid, 1, 1,
+								is_entry_alias(op->ora_e) ? 1 : 0, op->ora_e );
 	mdb_cursor_close( mcd );
 	if ( rs->sr_err != 0 ) {
 		Debug( LDAP_DEBUG_TRACE,
diff --git a/servers/slapd/back-mdb/bind.c b/servers/slapd/back-mdb/bind.c
index 060ca750f..924f2f179 100644
--- a/servers/slapd/back-mdb/bind.c
+++ b/servers/slapd/back-mdb/bind.c
@@ -67,7 +67,7 @@ mdb_bind( Operation *op, SlapReply *rs )
 	rtxn = moi->moi_txn;
 
 	/* get entry with reader lock */
-	rs->sr_err = mdb_dn2entry( op, rtxn, NULL, &op->o_req_ndn, &e, NULL, 0 );
+	rs->sr_err = mdb_dn2entry( op, rtxn, NULL, &op->o_req_ndn, &e, NULL, NULL, 0 );
 
 	switch(rs->sr_err) {
 	case MDB_NOTFOUND:
diff --git a/servers/slapd/back-mdb/compare.c b/servers/slapd/back-mdb/compare.c
index 47886f091..53f757147 100644
--- a/servers/slapd/back-mdb/compare.c
+++ b/servers/slapd/back-mdb/compare.c
@@ -43,7 +43,7 @@ mdb_compare( Operation *op, SlapReply *rs )
 	rtxn = moi->moi_txn;
 
 	/* get entry */
-	rs->sr_err = mdb_dn2entry( op, rtxn, NULL, &op->o_req_ndn, &e, NULL, 1 );
+	rs->sr_err = mdb_dn2entry( op, rtxn, NULL, &op->o_req_ndn, &e, NULL, NULL, 1 );
 	switch( rs->sr_err ) {
 	case MDB_NOTFOUND:
 	case 0:
diff --git a/servers/slapd/back-mdb/delete.c b/servers/slapd/back-mdb/delete.c
index 53661b1a5..a3aa2290a 100644
--- a/servers/slapd/back-mdb/delete.c
+++ b/servers/slapd/back-mdb/delete.c
@@ -124,7 +124,7 @@ txnReturn:
 		goto return_results;
 	}
 	/* get parent */
-	rs->sr_err = mdb_dn2entry( op, txn, mc, &pdn, &p, NULL, 1 );
+	rs->sr_err = mdb_dn2entry( op, txn, mc, &pdn, &p, NULL, NULL, 1 );
 	switch( rs->sr_err ) {
 	case 0:
 	case MDB_NOTFOUND:
@@ -167,7 +167,7 @@ txnReturn:
 	}
 
 	/* get entry */
-	rs->sr_err = mdb_dn2entry( op, txn, mc, &op->o_req_ndn, &e, NULL, 0 );
+	rs->sr_err = mdb_dn2entry( op, txn, mc, &op->o_req_ndn, &e, NULL, NULL, 0 );
 	switch( rs->sr_err ) {
 	case MDB_NOTFOUND:
 		e = p;
@@ -332,7 +332,8 @@ txnReturn:
 	}
 
 	/* delete from dn2id */
-	rs->sr_err = mdb_dn2id_delete( op, mc, e->e_id, 1 );
+	rs->sr_err = mdb_dn2id_delete( op, mc, e->e_id, 1,
+								   is_entry_alias(e) ? 1 : 0 );
 	mdb_cursor_close( mc );
 	if ( rs->sr_err != 0 ) {
 		Debug(LDAP_DEBUG_TRACE,
diff --git a/servers/slapd/back-mdb/dn2entry.c b/servers/slapd/back-mdb/dn2entry.c
index 50b6688ae..123daecdf 100644
--- a/servers/slapd/back-mdb/dn2entry.c
+++ b/servers/slapd/back-mdb/dn2entry.c
@@ -35,6 +35,7 @@ mdb_dn2entry(
 	struct berval *dn,
 	Entry **e,
 	ID *nsubs,
+	ID *aliases,
 	int matched )
 {
 	struct mdb_info *mdb = (struct mdb_info *) op->o_bd->be_private;
@@ -48,7 +49,7 @@ mdb_dn2entry(
 
 	*e = NULL;
 
-	rc = mdb_dn2id( op, tid, m2, dn, &id, nsubs, &mbv, &nmbv );
+	rc = mdb_dn2id( op, tid, m2, dn, &id, nsubs, aliases, &mbv, &nmbv );
 	if ( rc ) {
 		if ( matched ) {
 			rc2 = mdb_cursor_open( tid, mdb->mi_id2entry, &mc );
diff --git a/servers/slapd/back-mdb/dn2id.c b/servers/slapd/back-mdb/dn2id.c
index 31692a079..0db4cf7b8 100644
--- a/servers/slapd/back-mdb/dn2id.c
+++ b/servers/slapd/back-mdb/dn2id.c
@@ -46,10 +46,27 @@ typedef struct diskNode {
 	unsigned char nrdnlen[2];
 	char nrdn[1];
 	char rdn[1];                        /* variable placement */
+	unsigned char extrainfo[sizeof(ID)]; /* variable placement */
 	unsigned char entryID[sizeof(ID)];  /* variable placement */
-	/* unsigned char nsubs[sizeof(ID)];	in child nodes only */
 } diskNode;
 
+static inline int
+mdb_get_naliases(MDB_val*  data, ID *naliases)
+{
+	char* ptr;
+	ptr = data->mv_data + data->mv_size - 2 * sizeof(ID);
+	memcpy( naliases, ptr, sizeof(ID));
+	return 0;
+}
+
+static inline int
+mdb_get_parent_id(MDB_val *data, ID *id){
+	char* ptr;
+	ptr = data->mv_data  + data->mv_size - sizeof(ID);
+	memcpy( id, ptr, sizeof(ID) );
+	return 0;
+}
+
 /* Sort function for the sorted duplicate data items of a dn2id key.
  * Sorts based on normalized RDN, in length order.
  */
@@ -87,6 +104,7 @@ mdb_dn2id_add(
 	ID pid,
 	ID nsubs,
 	int upsub,
+	ID naliases,
 	Entry		*e )
 {
 	struct mdb_info *mdb = (struct mdb_info *) op->o_bd->be_private;
@@ -107,7 +125,7 @@ mdb_dn2id_add(
 		rlen = e->e_name.bv_len;
 	}
 
-	d = op->o_tmpalloc(sizeof(diskNode) + rlen + nrlen + sizeof(ID), op->o_tmpmemctx);
+	d = op->o_tmpalloc(sizeof(diskNode) + rlen + nrlen, op->o_tmpmemctx);
 	d->nrdnlen[1] = nrlen & 0xff;
 	d->nrdnlen[0] = (nrlen >> 8) | 0x80;
 	ptr = lutil_strncopy( d->nrdn, e->e_nname.bv_val, nrlen );
@@ -127,7 +145,7 @@ mdb_dn2id_add(
 	 * will fail harmlessly.
 	 */
 	if ( pid == 0 ) {
-		diskNode dummy = {{0, 0}, "", "", ""};
+		diskNode dummy = {{0, 0}, "", "", "", ""};
 		data.mv_data = &dummy;
 		data.mv_size = sizeof(diskNode);
 
@@ -135,7 +153,7 @@ mdb_dn2id_add(
 	}
 
 	data.mv_data = d;
-	data.mv_size = sizeof(diskNode) + rlen + nrlen + sizeof( ID );
+	data.mv_size = sizeof(diskNode) + rlen + nrlen;
 
 	/* Add our child node under parent's key */
 	rc = mdb_cursor_put( mcp, &key, &data, MDB_NODUPDATA );
@@ -144,10 +162,9 @@ mdb_dn2id_add(
 	if (rc == 0) {
 		int flag = MDB_NODUPDATA;
 		nid = e->e_id;
-		/* drop subtree count */
-		data.mv_size -= sizeof( ID );
-		ptr -= sizeof( ID );
 		memcpy( ptr, &pid, sizeof( ID ));
+		ptr -= sizeof( ID );
+		memcpy( ptr, &naliases, sizeof( ID ));
 		d->nrdnlen[0] ^= 0x80;
 
 		if ((slapMode & SLAP_TOOL_MODE) || (e->e_id == mdb->mi_nextid))
@@ -156,15 +173,31 @@ mdb_dn2id_add(
 	}
 	op->o_tmpfree( d, op->o_tmpmemctx );
 
-	/* Add our subtree count to all superiors */
+	/* Add our subtree count to all superiors;
+	   also, increase alias counter, if necessary */
 	if ( rc == 0 && upsub && pid ) {
 		ID subs;
+		ID aliases;
 		nid = pid;
 		do {
 			/* Get parent's RDN */
 			rc = mdb_cursor_get( mcp, &key, &data, MDB_SET );
 			if ( !rc ) {
 				char *p2;
+				if (naliases > 0) {
+					p2 = op->o_tmpalloc(data.mv_size , op->o_tmpmemctx );
+					memcpy( p2, data.mv_data, data.mv_size );
+					ptr = (char *)p2 + data.mv_size - 2 * sizeof( ID );
+					memcpy( &aliases, ptr, sizeof( ID ));
+					aliases += naliases;
+					memcpy(  ptr, &aliases, sizeof( ID ));
+					data.mv_data = p2;
+					rc = mdb_cursor_put( mcp, &key, &data, MDB_CURRENT );
+					op->o_tmpfree( p2, op->o_tmpmemctx );
+					if (!rc)
+						rc = mdb_cursor_get( mcp, &key, &data, MDB_SET );
+				}
+				if (rc) break;
 				ptr = (char *)data.mv_data + data.mv_size - sizeof( ID );
 				memcpy( &nid, ptr, sizeof( ID ));
 				/* Get parent's node under grandparent */
@@ -205,7 +238,8 @@ mdb_dn2id_delete(
 	Operation	*op,
 	MDB_cursor *mc,
 	ID id,
-	ID nsubs )
+	ID nsubs,
+	ID naliases )
 {
 	ID nid;
 	char *ptr;
@@ -234,7 +268,7 @@ mdb_dn2id_delete(
 			rc = mdb_cursor_del( mc, 0 );
 	}
 
-	/* Delete our subtree count from all superiors */
+	/* Delete our subtree and alias count from all superiors */
 	if ( rc == 0 && nsubs && nid ) {
 		MDB_val key, data;
 		ID subs;
@@ -246,6 +280,21 @@ mdb_dn2id_delete(
 				char *p2;
 				diskNode *d;
 				int rlen;
+				ID aliases;
+				if (naliases > 0) {
+					p2 = op->o_tmpalloc(data.mv_size , op->o_tmpmemctx );
+					memcpy( p2, data.mv_data, data.mv_size );
+					ptr = (char *)p2 + data.mv_size - 2 * sizeof( ID );
+					memcpy( &aliases, ptr, sizeof( ID ));
+					aliases -= naliases;
+					memcpy(  ptr, &aliases, sizeof( ID ));
+					data.mv_data = p2;
+					rc = mdb_cursor_put( mc, &key, &data, MDB_CURRENT );
+					op->o_tmpfree( p2, op->o_tmpmemctx );
+					if (!rc)
+						rc = mdb_cursor_get( mc, &key, &data, MDB_SET );
+				}
+				if (rc) break;
 				ptr = (char *)data.mv_data + data.mv_size - sizeof( ID );
 				memcpy( &nid, ptr, sizeof( ID ));
 				/* Get parent's node under grandparent */
@@ -293,6 +342,7 @@ mdb_dn2id(
 	struct berval	*in,
 	ID	*id,
 	ID	*nsubs,
+	ID	*aliases,
 	struct berval	*matched,
 	struct berval	*nmatched )
 {
@@ -371,7 +421,7 @@ mdb_dn2id(
 		if ( matched ) {
 			int rlen;
 			d = data.mv_data;
-			rlen = data.mv_size - sizeof(diskNode) - tmp.bv_len - sizeof(ID);
+			rlen = data.mv_size - sizeof(diskNode) - tmp.bv_len;
 			matched->bv_len += rlen;
 			matched->bv_val -= rlen + 1;
 			ptr = lutil_strcopy( matched->bv_val, d->rdn + tmp.bv_len );
@@ -402,6 +452,24 @@ mdb_dn2id(
 		ptr = (char *)data.mv_data + data.mv_size - sizeof(ID);
 		memcpy( nsubs, ptr, sizeof( ID ));
 	}
+	if ( !rc && aliases ) {
+		MDB_val akey, adata;
+		ID aid;
+
+		akey.mv_size = sizeof(ID);
+		akey.mv_data = &aid;
+		aid = nid;
+
+		rc = mdb_cursor_get( cursor, &akey, &adata, MDB_SET );
+		if ( !rc ) {
+			d = (diskNode*)adata.mv_data;
+			assert ( ( d->nrdnlen[0] & 0x80 )  != 0x80 );
+			ptr = (char *) adata.mv_data + adata.mv_size - 2 * sizeof(ID);
+			memcpy(aliases, ptr, sizeof(ID));
+		}
+		if (mc) /* reset cursor to expected position */
+			rc = mdb_cursor_get( cursor, &key, &data, MDB_GET_BOTH );
+	}
 	if ( !mc )
 		mdb_cursor_close( cursor );
 done:
@@ -883,7 +951,7 @@ mdb_dn2id_walk(
 			isc->nrdns[n].bv_len = ((d->nrdnlen[0] & 0x7f) << 8) | d->nrdnlen[1];
 			isc->nrdns[n].bv_val = d->nrdn;
 			isc->rdns[n].bv_val = d->nrdn+isc->nrdns[n].bv_len+1;
-			isc->rdns[n].bv_len = data.mv_size - sizeof(diskNode) - isc->nrdns[n].bv_len - sizeof(ID);
+			isc->rdns[n].bv_len = data.mv_size - sizeof(diskNode) - isc->nrdns[n].bv_len;
 			/* return this ID to caller */
 			if ( !isc->nscope )
 				break;
@@ -965,3 +1033,151 @@ void mdb_dn2id_wrestore (
 		isc->rdns[n].bv_val = d->nrdn+isc->nrdns[n].bv_len+1;
 	}
 }
+
+int
+mdb_get_aliases(
+	Operation *op,
+	MDB_txn	*txn,
+	ID e_id,
+	ID *ids,
+	ID *res
+	 )
+{
+	int rc, n;
+	ID2 *scopes;
+
+	struct mdb_info *mdb = (struct mdb_info *) op->o_bd->be_private;
+	MDB_dbi dbi = mdb->mi_dn2id;
+	MDB_cursor *cursor;
+
+	ID id = e_id;
+	ID nsubs, naliases, found_aliases = 0;
+	int oscope, nscope, numrdns = 0;
+	MDB_val key, data;
+	char *ptr;
+	diskNode *d;
+	struct berval rdns[MAXRDNS];
+	struct berval nrdns[MAXRDNS];
+
+	rc = mdb_cursor_open( txn, dbi, &cursor );
+	if ( rc ) return rc;
+	scopes = ch_malloc( MDB_IDL_UM_SIZE * sizeof( ID2 ));
+	numrdns = 0;
+
+	MDB_IDL_ZERO( res );
+
+	oscope = op->oq_search.rs_scope;
+
+	key.mv_data = &id;
+	key.mv_size = sizeof(ID);
+
+	rc = mdb_cursor_get( cursor, &key, &data, MDB_SET );
+	rc = mdb_get_naliases(&data, &naliases);
+	if ( !naliases)
+		goto done;
+
+	if (oscope == LDAP_SCOPE_SUBTREE && naliases > MDB_IDL_DB_SIZE-1){
+		MDB_IDL_RANGE( res, MDB_IDL_FIRST( ids ), MDB_IDL_LAST( ids ));
+		goto done;
+	}
+
+	scopes[0].mid = id;
+	numrdns++;
+	nscope = 0;
+
+	for (;;){ // until bored
+		for (;;) {
+			/* Get next sibling */
+			rc = mdb_cursor_get( cursor, &key, &data, MDB_NEXT_DUP );
+			if ( !rc ) {
+				ptr = (char *)data.mv_data + data.mv_size - 2*sizeof(ID);
+				d = data.mv_data;
+				memcpy( &id, ptr, sizeof(ID));
+
+				/* If we're pushing down, see if there's any children to find */
+				if ( nscope || oscope == LDAP_SCOPE_ONELEVEL ) {
+					ptr += sizeof(ID);
+					memcpy( &nsubs, ptr, sizeof(ID));
+					/* No children, go to next sibling */
+					if ( nsubs < 2 ){
+						// check for aliases
+						ID na;
+						MDB_val tkey, tdata;
+						tkey.mv_size = sizeof(ID);
+						tkey.mv_data = &id;
+						mdb_cursor_get( cursor, &tkey, &tdata, MDB_SET );
+						rc = mdb_get_naliases(&tdata, &na);
+						if (na){
+							assert(na == 1);
+							found_aliases++;
+							if ( res[0] >= MDB_IDL_DB_SIZE-1 ) {
+								/* too many aliases in scope. Fallback to range */
+								MDB_IDL_RANGE( res, MDB_IDL_FIRST( ids ), MDB_IDL_LAST( ids ));
+								goto done;
+							}
+							res[0]++;
+							res[res[0]] = id;
+						}
+						mdb_cursor_get( cursor, &key, &data, MDB_GET_BOTH );
+						continue; // inner for loop
+					}
+				}
+				n = numrdns;
+				scopes[n].mid = id;
+				n--;
+				nrdns[n].bv_len = ((d->nrdnlen[0] & 0x7f) << 8) | d->nrdnlen[1];
+				nrdns[n].bv_val = d->nrdn;
+				rdns[n].bv_val = d->nrdn+nrdns[n].bv_len+1;
+				rdns[n].bv_len = data.mv_size - sizeof(diskNode) - nrdns[n].bv_len;
+				/* return this ID to caller */
+				if ( !nscope )
+					break;
+				/* push down to child */
+				key.mv_data = &id;
+				mdb_cursor_get( cursor, &key, &data, MDB_SET );
+				nscope = 0;
+				numrdns++;
+				continue;
+			} else if ( rc == MDB_NOTFOUND ) {
+				if ( !nscope && oscope != LDAP_SCOPE_ONELEVEL ) {
+					/* reset to first dup */
+					mdb_cursor_get( cursor, &key, NULL, MDB_GET_CURRENT );
+					mdb_cursor_get( cursor, &key, &data, MDB_SET );
+					nscope = 1;
+					continue;
+				} else {
+					numrdns--;
+					/* stack is empty? */
+					if ( !numrdns )
+						break;
+					/* pop up to prev node */
+					n = numrdns - 1;
+					key.mv_data = &scopes[n].mid;
+					key.mv_size = sizeof(ID);
+					data.mv_data = nrdns[n].bv_val - 2;
+					data.mv_size = 1;	/* just needs to be non-zero, mdb_dup_compare doesn't care */
+					mdb_cursor_get( cursor, &key, &data, MDB_GET_BOTH );
+					continue;
+				}
+			} else {
+				break;
+			}
+		}
+		if (!numrdns)
+			break; // bored now
+	}
+
+done:
+/*
+  if (MDB_IDL_IS_RANGE(res)){
+		printf("returning range: %lu %lu\n", res[1], res[2]);
+	} else {
+		assert(found_aliases == naliases);
+		if (naliases)
+			printf("found %lu naliases\n", naliases);
+	}
+*/
+	mdb_cursor_close(cursor);
+	ch_free( scopes );
+	return LDAP_SUCCESS;
+}
diff --git a/servers/slapd/back-mdb/filterindex.c b/servers/slapd/back-mdb/filterindex.c
index b71f0d39d..04cf72912 100644
--- a/servers/slapd/back-mdb/filterindex.c
+++ b/servers/slapd/back-mdb/filterindex.c
@@ -514,7 +514,8 @@ ext_candidates(
 		MDB_IDL_ZERO( ids );
 		if ( mra->ma_rule == slap_schema.si_mr_distinguishedNameMatch ) {
 base:
-			rc = mdb_dn2id( op, rtxn, NULL, &mra->ma_value, &id, NULL, NULL, NULL );
+			rc = mdb_dn2id( op, rtxn, NULL, &mra->ma_value, &id, NULL,
+                            NULL, NULL, NULL );
 			if ( rc == MDB_SUCCESS ) {
 				mdb_idl_insert( ids, id );
 			}
@@ -715,7 +716,8 @@ equality_candidates(
 
 	if ( ava->aa_desc == slap_schema.si_ad_entryDN ) {
 		ID id;
-		rc = mdb_dn2id( op, rtxn, NULL, &ava->aa_value, &id, NULL, NULL, NULL );
+		rc = mdb_dn2id( op, rtxn, NULL, &ava->aa_value, &id, NULL, NULL,
+                        NULL, NULL );
 		if ( rc == LDAP_SUCCESS ) {
 			/* exactly one ID can match */
 			ids[0] = 1;
diff --git a/servers/slapd/back-mdb/id2entry.c b/servers/slapd/back-mdb/id2entry.c
index b580ebda6..b031f86a6 100644
--- a/servers/slapd/back-mdb/id2entry.c
+++ b/servers/slapd/back-mdb/id2entry.c
@@ -328,7 +328,7 @@ int mdb_entry_get(
 	txn = moi->moi_txn;
 
 	/* can we find entry */
-	rc = mdb_dn2entry( op, txn, NULL, ndn, &e, NULL, 0 );
+	rc = mdb_dn2entry( op, txn, NULL, ndn, &e, NULL, NULL, 0 );
 	switch( rc ) {
 	case MDB_NOTFOUND:
 	case 0:
diff --git a/servers/slapd/back-mdb/modify.c b/servers/slapd/back-mdb/modify.c
index 4509373cf..55a986045 100644
--- a/servers/slapd/back-mdb/modify.c
+++ b/servers/slapd/back-mdb/modify.c
@@ -529,7 +529,7 @@ txnReturn:
 	}
 
 	/* get entry or ancestor */
-	rs->sr_err = mdb_dn2entry( op, txn, NULL, &op->o_req_ndn, &e, NULL, 1 );
+	rs->sr_err = mdb_dn2entry( op, txn, NULL, &op->o_req_ndn, &e, NULL, NULL, 1 );
 
 	if ( rs->sr_err != 0 ) {
 		Debug( LDAP_DEBUG_TRACE,
diff --git a/servers/slapd/back-mdb/modrdn.c b/servers/slapd/back-mdb/modrdn.c
index 050777dd0..22ef0e2b4 100644
--- a/servers/slapd/back-mdb/modrdn.c
+++ b/servers/slapd/back-mdb/modrdn.c
@@ -46,7 +46,7 @@ mdb_modrdn( Operation	*op, SlapReply *rs )
 
 	int		manageDSAit = get_manageDSAit( op );
 
-	ID nid, nsubs;
+	ID nid, nsubs, aliases;
 	LDAPControl **preread_ctrl = NULL;
 	LDAPControl **postread_ctrl = NULL;
 	LDAPControl *ctrls[SLAP_MAX_RESPONSE_CONTROLS];
@@ -145,7 +145,7 @@ txnReturn:
 		rs->sr_text = "DN cursor_open failed";
 		goto return_results;
 	}
-	rs->sr_err = mdb_dn2entry( op, txn, mc, &p_ndn, &p, NULL, 0 );
+	rs->sr_err = mdb_dn2entry( op, txn, mc, &p_ndn, &p, NULL, NULL, 0 );
 	switch( rs->sr_err ) {
 	case MDB_NOTFOUND:
 		Debug( LDAP_DEBUG_TRACE, LDAP_XSTRING(mdb_modrdn)
@@ -199,7 +199,8 @@ txnReturn:
 		p_dn.bv_val, 0, 0 );
 
 	/* get entry */
-	rs->sr_err = mdb_dn2entry( op, txn, mc, &op->o_req_ndn, &e, &nsubs, 0 );
+	rs->sr_err = mdb_dn2entry( op, txn, mc, &op->o_req_ndn, &e, &nsubs,
+							   &aliases, 0 );
 	switch( rs->sr_err ) {
 	case MDB_NOTFOUND:
 		e = p;
@@ -321,7 +322,7 @@ txnReturn:
 				goto return_results;
 			}
 			/* Get Entry with dn=newSuperior. Does newSuperior exist? */
-			rs->sr_err = mdb_dn2entry( op, txn, NULL, np_ndn, &np, NULL, 0 );
+			rs->sr_err = mdb_dn2entry( op, txn, NULL, np_ndn, &np, NULL, NULL, 0 );
 
 			switch( rs->sr_err ) {
 			case 0:
@@ -432,7 +433,8 @@ txnReturn:
 		new_ndn.bv_val, 0, 0 );
 
 	/* Shortcut the search */
-	rs->sr_err = mdb_dn2id ( op, txn, NULL, &new_ndn, &nid, NULL, NULL, NULL );
+	rs->sr_err = mdb_dn2id ( op, txn, NULL, &new_ndn, &nid, NULL, NULL, NULL,
+							 NULL );
 	switch( rs->sr_err ) {
 	case MDB_NOTFOUND:
 		break;
@@ -473,7 +475,7 @@ txnReturn:
 	 * If moving to a new parent, must delete current subtree count,
 	 * otherwise leave it unchanged since we'll be adding it right back.
 	 */
-	rs->sr_err = mdb_dn2id_delete( op, mc, e->e_id, np ? nsubs : 0 );
+	rs->sr_err = mdb_dn2id_delete( op, mc, e->e_id, np ? nsubs : 0, aliases);
 	if ( rs->sr_err != 0 ) {
 		Debug(LDAP_DEBUG_TRACE,
 			"<=- " LDAP_XSTRING(mdb_modrdn)
@@ -492,7 +494,7 @@ txnReturn:
 
 	/* add new DN */
 	rs->sr_err = mdb_dn2id_add( op, mc, mc, np ? np->e_id : p->e_id,
-		nsubs, np != NULL, &dummy );
+		nsubs, np != NULL, aliases, &dummy );
 	if ( rs->sr_err != 0 ) {
 		Debug(LDAP_DEBUG_TRACE,
 			"<=- " LDAP_XSTRING(mdb_modrdn)
diff --git a/servers/slapd/back-mdb/proto-mdb.h b/servers/slapd/back-mdb/proto-mdb.h
index 55089964a..8132a6075 100644
--- a/servers/slapd/back-mdb/proto-mdb.h
+++ b/servers/slapd/back-mdb/proto-mdb.h
@@ -60,7 +60,7 @@ int mdb_back_init_cf( BackendInfo *bi );
  */
 
 int mdb_dn2entry LDAP_P(( Operation *op, MDB_txn *tid, MDB_cursor *mc,
-	struct berval *dn, Entry **e, ID *nsubs, int matched ));
+	struct berval *dn, Entry **e, ID *nsubs, ID *aliases, int matched ));
 
 /*
  * dn2id.c
@@ -73,6 +73,7 @@ int mdb_dn2id(
 	struct berval *ndn,
 	ID *id,
 	ID *nsubs,
+	ID *aliases,
 	struct berval *matched,
 	struct berval *nmatched );
 
@@ -83,13 +84,15 @@ int mdb_dn2id_add(
 	ID pid,
 	ID nsubs,
 	int upsub,
+	ID naliases,
 	Entry *e );
 
 int mdb_dn2id_delete(
 	Operation *op,
 	MDB_cursor *mc,
 	ID id,
-	ID nsubs );
+	ID nsubs,
+	ID naliases );
 
 int mdb_dn2id_children(
 	Operation *op,
@@ -150,6 +153,14 @@ void mdb_dn2id_wrestore(
 	Operation *op,
 	struct IdScopes *isc );
 
+int
+mdb_get_aliases(
+	Operation *op,
+	MDB_txn	*txn,
+	ID e_id,
+	ID *ids,
+	ID *res	);
+
 MDB_cmp_func mdb_dup_compare;
 
 /*
diff --git a/servers/slapd/back-mdb/search.c b/servers/slapd/back-mdb/search.c
index a4d58e4ae..97d769c06 100644
--- a/servers/slapd/back-mdb/search.c
+++ b/servers/slapd/back-mdb/search.c
@@ -98,7 +98,7 @@ static Entry * deref_base (
 			break;
 		}
 
-		rs->sr_err = mdb_dn2entry( op, txn, NULL, &ndn, &e, NULL, 0 );
+		rs->sr_err = mdb_dn2entry( op, txn, NULL, &ndn, &e, NULL, NULL, 0 );
 		if (rs->sr_err) {
 			rs->sr_err = LDAP_ALIAS_PROBLEM;
 			rs->sr_text = "aliasedObject not found";
@@ -174,7 +174,8 @@ static int search_aliases(
 		/* Set curscop to only the aliases in the current scope. Start with
 		 * all the aliases, then get the intersection with the scope.
 		 */
-		rs->sr_err = mdb_idscope( op, isc->mt, e_id, aliases, curscop );
+		// rs->sr_err = mdb_idscope( op, isc->mt, e_id, aliases, curscop );
+		rs->sr_err = mdb_get_aliases(op, isc->mt, e_id, aliases, curscop);
 
 		/* Dereference all of the aliases in the current scope. */
 		cursora = 0;
@@ -414,7 +415,7 @@ int
 mdb_search( Operation *op, SlapReply *rs )
 {
 	struct mdb_info *mdb = (struct mdb_info *) op->o_bd->be_private;
-	ID		id, cursor, nsubs, ncand, cscope;
+	ID		id, cursor, nsubs, ncand, cscope, aliases;
 	ID		lastid = NOID;
 	ID		candidates[MDB_IDL_UM_SIZE];
 	ID		iscopes[MDB_IDL_DB_SIZE];
@@ -477,7 +478,8 @@ mdb_search( Operation *op, SlapReply *rs )
 	}
 dn2entry_retry:
 	/* get entry with reader lock */
-	rs->sr_err = mdb_dn2entry( op, ltid, mcd, &op->o_req_ndn, &e, &nsubs, 1 );
+	rs->sr_err = mdb_dn2entry( op, ltid, mcd, &op->o_req_ndn, &e,
+                               &nsubs, &aliases, 1 );
 
 	switch(rs->sr_err) {
 	case MDB_NOTFOUND:
diff --git a/servers/slapd/back-mdb/tools.c b/servers/slapd/back-mdb/tools.c
index bb56e65e0..90b3b0159 100644
--- a/servers/slapd/back-mdb/tools.c
+++ b/servers/slapd/back-mdb/tools.c
@@ -320,7 +320,7 @@ ID mdb_tool_dn2id_get(
 	op.o_tmpmemctx = NULL;
 	op.o_tmpmfuncs = &ch_mfuncs;
 
-	rc = mdb_dn2id( &op, mdb_tool_txn, NULL, dn, &id, NULL, NULL, NULL );
+	rc = mdb_dn2id( &op, mdb_tool_txn, NULL, dn, &id, NULL, NULL, NULL, NULL );
 	if ( rc == MDB_NOTFOUND )
 		return NOID;
 
@@ -441,7 +441,7 @@ static int mdb_tool_next_id(
 		return 0;
 	}
 
-	rc = mdb_dn2id( op, tid, mcp, &ndn, &id, NULL, NULL, &nmatched );
+	rc = mdb_dn2id( op, tid, mcp, &ndn, &id, NULL, NULL, NULL, &nmatched );
 	if ( rc == MDB_NOTFOUND ) {
 		if ( !be_issuffix( op->o_bd, &ndn ) ) {
 			ID eid = e->e_id;
@@ -476,7 +476,8 @@ static int mdb_tool_next_id(
 			"=> mdb_tool_next_id: %s\n", text->bv_val, 0, 0 );
 			return rc;
 		}
-		rc = mdb_dn2id_add( op, mcp, mcd, pid, 1, 1, e );
+		rc = mdb_dn2id_add( op, mcp, mcd, pid, 1, 1,
+							is_entry_alias(e) ? 1 : 0, e );
 		if ( rc ) {
 			snprintf( text->bv_val, text->bv_len,
 				"dn2id_add failed: %s (%d)",
