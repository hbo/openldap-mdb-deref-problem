From 76b59d6efdd0d37bde3afc572b65f00fe075ec25 Mon Sep 17 00:00:00 2001
From: Henrik Bohnenkamp <hbohnenkamp@united-internet.de>
Date: Tue, 19 Jun 2018 23:15:43 +0200
Subject: [PATCH 1/2] Extension of dn2id DB by entry counting number of aliases
 in subtree

This commit adds a 2nd field to the entries in the dn2id database
which holds, appart from rdn and nrdn, the parent id (pid) of a
node. The pid holds, as before, the rightmost position in the data
record and has size sizeof(ID). The new field is positioned to the
left of the the pid and has also size sizeof(ID). The new field
"naliases" counts the number of aliases in the subtree of the id.

The diskNode data structure, defined in and confined to  dn2id.c has
been extended by one more sizeof(ID) field. This makes things easier
when sizeof(diskNode) is used in size computations.

The naliases field is created and initialised in the mdb_dn2id_add
function. Similar to the nsubs entry in the child entries of an id,
the naliases field of parent entries are updated if an id is added to
the DB denoting and alias entry in the DIT. Similarly,
mdb_dn2id_delete takes care of subtracting the naliases count of
ancestor  ids.

The only place where the alias count here is actually referenced is in
the mdb_modrdn function where a whole subtree can be attached to a new
parent, which requires subtraction of naliases in the old ancestors
and addition the new ancestors. This makes a change to the
dn2id function necessary, which returns the number of aliases in a place
provided by a *ID pointer. Nothing is done when the pointer is
NULL. Also the dn2entry interface had to be changed with an extra *ID
parameter. mdb_dn2entry and mdb_dn2is are called frequently in other
files.  The interface changes to both makes trivial adjustments
necessary to all calls to these functions, by adding a NULL.
The side effect of the dn2id function (when passed a cursor the cursor
must point to the right entry in the DB on return) is observed.

---
 servers/slapd/back-mdb/add.c         |  6 ++-
 servers/slapd/back-mdb/bind.c        |  2 +-
 servers/slapd/back-mdb/compare.c     |  2 +-
 servers/slapd/back-mdb/delete.c      |  7 +--
 servers/slapd/back-mdb/dn2entry.c    |  3 +-
 servers/slapd/back-mdb/dn2id.c       | 75 +++++++++++++++++++++++-----
 servers/slapd/back-mdb/filterindex.c |  6 ++-
 servers/slapd/back-mdb/id2entry.c    |  2 +-
 servers/slapd/back-mdb/modify.c      |  2 +-
 servers/slapd/back-mdb/modrdn.c      | 16 +++---
 servers/slapd/back-mdb/proto-mdb.h   |  7 ++-
 servers/slapd/back-mdb/search.c      |  7 +--
 servers/slapd/back-mdb/tools.c       | 11 ++--
 13 files changed, 105 insertions(+), 41 deletions(-)

diff --git a/servers/slapd/back-mdb/add.c b/servers/slapd/back-mdb/add.c
index 26bd264cc..732ad03ac 100644
--- a/servers/slapd/back-mdb/add.c
+++ b/servers/slapd/back-mdb/add.c
@@ -117,7 +117,8 @@ mdb_add(Operation *op, SlapReply *rs )
 	}
 
 	/* get entry or parent */
-	rs->sr_err = mdb_dn2entry( op, txn, mcd, &op->ora_e->e_nname, &p, NULL, 1 );
+	rs->sr_err = mdb_dn2entry( op, txn, mcd, &op->ora_e->e_nname, &p, NULL,
+                               NULL, 1 );
 	switch( rs->sr_err ) {
 	case 0:
 		rs->sr_err = LDAP_ALREADY_EXISTS;
@@ -302,7 +303,8 @@ mdb_add(Operation *op, SlapReply *rs )
 	op->ora_e->e_id = eid;
 
 	/* dn2id index */
-	rs->sr_err = mdb_dn2id_add( op, mcd, mcd, pid, 1, 1, op->ora_e );
+	rs->sr_err = mdb_dn2id_add( op, mcd, mcd, pid, 1, 1,
+								is_entry_alias(op->ora_e) ? 1 : 0, op->ora_e );
 	mdb_cursor_close( mcd );
 	if ( rs->sr_err != 0 ) {
 		Debug( LDAP_DEBUG_TRACE,
diff --git a/servers/slapd/back-mdb/bind.c b/servers/slapd/back-mdb/bind.c
index 060ca750f..924f2f179 100644
--- a/servers/slapd/back-mdb/bind.c
+++ b/servers/slapd/back-mdb/bind.c
@@ -67,7 +67,7 @@ mdb_bind( Operation *op, SlapReply *rs )
 	rtxn = moi->moi_txn;
 
 	/* get entry with reader lock */
-	rs->sr_err = mdb_dn2entry( op, rtxn, NULL, &op->o_req_ndn, &e, NULL, 0 );
+	rs->sr_err = mdb_dn2entry( op, rtxn, NULL, &op->o_req_ndn, &e, NULL, NULL, 0 );
 
 	switch(rs->sr_err) {
 	case MDB_NOTFOUND:
diff --git a/servers/slapd/back-mdb/compare.c b/servers/slapd/back-mdb/compare.c
index 47886f091..53f757147 100644
--- a/servers/slapd/back-mdb/compare.c
+++ b/servers/slapd/back-mdb/compare.c
@@ -43,7 +43,7 @@ mdb_compare( Operation *op, SlapReply *rs )
 	rtxn = moi->moi_txn;
 
 	/* get entry */
-	rs->sr_err = mdb_dn2entry( op, rtxn, NULL, &op->o_req_ndn, &e, NULL, 1 );
+	rs->sr_err = mdb_dn2entry( op, rtxn, NULL, &op->o_req_ndn, &e, NULL, NULL, 1 );
 	switch( rs->sr_err ) {
 	case MDB_NOTFOUND:
 	case 0:
diff --git a/servers/slapd/back-mdb/delete.c b/servers/slapd/back-mdb/delete.c
index cdc8f3d97..b6e0e4583 100644
--- a/servers/slapd/back-mdb/delete.c
+++ b/servers/slapd/back-mdb/delete.c
@@ -87,7 +87,7 @@ mdb_delete( Operation *op, SlapReply *rs )
 		goto return_results;
 	}
 	/* get parent */
-	rs->sr_err = mdb_dn2entry( op, txn, mc, &pdn, &p, NULL, 1 );
+	rs->sr_err = mdb_dn2entry( op, txn, mc, &pdn, &p, NULL, NULL, 1 );
 	switch( rs->sr_err ) {
 	case 0:
 	case MDB_NOTFOUND:
@@ -130,7 +130,7 @@ mdb_delete( Operation *op, SlapReply *rs )
 	}
 
 	/* get entry */
-	rs->sr_err = mdb_dn2entry( op, txn, mc, &op->o_req_ndn, &e, NULL, 0 );
+	rs->sr_err = mdb_dn2entry( op, txn, mc, &op->o_req_ndn, &e, NULL, NULL, 0 );
 	switch( rs->sr_err ) {
 	case MDB_NOTFOUND:
 		e = p;
@@ -295,7 +295,8 @@ mdb_delete( Operation *op, SlapReply *rs )
 	}
 
 	/* delete from dn2id */
-	rs->sr_err = mdb_dn2id_delete( op, mc, e->e_id, 1 );
+	rs->sr_err = mdb_dn2id_delete( op, mc, e->e_id, 1,
+								   is_entry_alias(op->ora_e) ? 1 : 0 );
 	mdb_cursor_close( mc );
 	if ( rs->sr_err != 0 ) {
 		Debug(LDAP_DEBUG_TRACE,
diff --git a/servers/slapd/back-mdb/dn2entry.c b/servers/slapd/back-mdb/dn2entry.c
index 50b6688ae..123daecdf 100644
--- a/servers/slapd/back-mdb/dn2entry.c
+++ b/servers/slapd/back-mdb/dn2entry.c
@@ -35,6 +35,7 @@ mdb_dn2entry(
 	struct berval *dn,
 	Entry **e,
 	ID *nsubs,
+	ID *aliases,
 	int matched )
 {
 	struct mdb_info *mdb = (struct mdb_info *) op->o_bd->be_private;
@@ -48,7 +49,7 @@ mdb_dn2entry(
 
 	*e = NULL;
 
-	rc = mdb_dn2id( op, tid, m2, dn, &id, nsubs, &mbv, &nmbv );
+	rc = mdb_dn2id( op, tid, m2, dn, &id, nsubs, aliases, &mbv, &nmbv );
 	if ( rc ) {
 		if ( matched ) {
 			rc2 = mdb_cursor_open( tid, mdb->mi_id2entry, &mc );
diff --git a/servers/slapd/back-mdb/dn2id.c b/servers/slapd/back-mdb/dn2id.c
index 31692a079..70c36fdb4 100644
--- a/servers/slapd/back-mdb/dn2id.c
+++ b/servers/slapd/back-mdb/dn2id.c
@@ -46,8 +46,8 @@ typedef struct diskNode {
 	unsigned char nrdnlen[2];
 	char nrdn[1];
 	char rdn[1];                        /* variable placement */
+	unsigned char extrainfo[sizeof(ID)]; /* variable placement */
 	unsigned char entryID[sizeof(ID)];  /* variable placement */
-	/* unsigned char nsubs[sizeof(ID)];	in child nodes only */
 } diskNode;
 
 /* Sort function for the sorted duplicate data items of a dn2id key.
@@ -87,6 +87,7 @@ mdb_dn2id_add(
 	ID pid,
 	ID nsubs,
 	int upsub,
+	ID naliases,
 	Entry		*e )
 {
 	struct mdb_info *mdb = (struct mdb_info *) op->o_bd->be_private;
@@ -107,7 +108,7 @@ mdb_dn2id_add(
 		rlen = e->e_name.bv_len;
 	}
 
-	d = op->o_tmpalloc(sizeof(diskNode) + rlen + nrlen + sizeof(ID), op->o_tmpmemctx);
+	d = op->o_tmpalloc(sizeof(diskNode) + rlen + nrlen, op->o_tmpmemctx);
 	d->nrdnlen[1] = nrlen & 0xff;
 	d->nrdnlen[0] = (nrlen >> 8) | 0x80;
 	ptr = lutil_strncopy( d->nrdn, e->e_nname.bv_val, nrlen );
@@ -127,7 +128,7 @@ mdb_dn2id_add(
 	 * will fail harmlessly.
 	 */
 	if ( pid == 0 ) {
-		diskNode dummy = {{0, 0}, "", "", ""};
+		diskNode dummy = {{0, 0}, "", "", "", ""};
 		data.mv_data = &dummy;
 		data.mv_size = sizeof(diskNode);
 
@@ -135,7 +136,7 @@ mdb_dn2id_add(
 	}
 
 	data.mv_data = d;
-	data.mv_size = sizeof(diskNode) + rlen + nrlen + sizeof( ID );
+	data.mv_size = sizeof(diskNode) + rlen + nrlen;
 
 	/* Add our child node under parent's key */
 	rc = mdb_cursor_put( mcp, &key, &data, MDB_NODUPDATA );
@@ -144,10 +145,9 @@ mdb_dn2id_add(
 	if (rc == 0) {
 		int flag = MDB_NODUPDATA;
 		nid = e->e_id;
-		/* drop subtree count */
-		data.mv_size -= sizeof( ID );
-		ptr -= sizeof( ID );
 		memcpy( ptr, &pid, sizeof( ID ));
+		ptr -= sizeof( ID );
+		memcpy( ptr, &naliases, sizeof( ID ));
 		d->nrdnlen[0] ^= 0x80;
 
 		if ((slapMode & SLAP_TOOL_MODE) || (e->e_id == mdb->mi_nextid))
@@ -156,15 +156,31 @@ mdb_dn2id_add(
 	}
 	op->o_tmpfree( d, op->o_tmpmemctx );
 
-	/* Add our subtree count to all superiors */
+	/* Add our subtree count to all superiors;
+	   also, increase alias counter, if necessary */
 	if ( rc == 0 && upsub && pid ) {
 		ID subs;
+		ID aliases;
 		nid = pid;
 		do {
 			/* Get parent's RDN */
 			rc = mdb_cursor_get( mcp, &key, &data, MDB_SET );
 			if ( !rc ) {
 				char *p2;
+				if (naliases > 0) {
+					p2 = op->o_tmpalloc(data.mv_size , op->o_tmpmemctx );
+					memcpy( p2, data.mv_data, data.mv_size );
+					ptr = (char *)p2 + data.mv_size - 2 * sizeof( ID );
+					memcpy( &aliases, ptr, sizeof( ID ));
+					aliases += naliases;
+					memcpy(  ptr, &aliases, sizeof( ID ));
+					data.mv_data = p2;
+					rc = mdb_cursor_put( mcp, &key, &data, MDB_CURRENT );
+					op->o_tmpfree( p2, op->o_tmpmemctx );
+					if (!rc)
+						rc = mdb_cursor_get( mcp, &key, &data, MDB_SET );
+				}
+				if (rc) break;
 				ptr = (char *)data.mv_data + data.mv_size - sizeof( ID );
 				memcpy( &nid, ptr, sizeof( ID ));
 				/* Get parent's node under grandparent */
@@ -205,7 +221,8 @@ mdb_dn2id_delete(
 	Operation	*op,
 	MDB_cursor *mc,
 	ID id,
-	ID nsubs )
+	ID nsubs,
+	ID naliases )
 {
 	ID nid;
 	char *ptr;
@@ -234,7 +251,7 @@ mdb_dn2id_delete(
 			rc = mdb_cursor_del( mc, 0 );
 	}
 
-	/* Delete our subtree count from all superiors */
+	/* Delete our subtree and alias count from all superiors */
 	if ( rc == 0 && nsubs && nid ) {
 		MDB_val key, data;
 		ID subs;
@@ -246,6 +263,21 @@ mdb_dn2id_delete(
 				char *p2;
 				diskNode *d;
 				int rlen;
+				ID aliases;
+				if (naliases > 0) {
+					p2 = op->o_tmpalloc(data.mv_size , op->o_tmpmemctx );
+					memcpy( p2, data.mv_data, data.mv_size );
+					ptr = (char *)p2 + data.mv_size - 2 * sizeof( ID );
+					memcpy( &aliases, ptr, sizeof( ID ));
+					aliases -= naliases;
+					memcpy(  ptr, &aliases, sizeof( ID ));
+					data.mv_data = p2;
+					rc = mdb_cursor_put( mc, &key, &data, MDB_CURRENT );
+					op->o_tmpfree( p2, op->o_tmpmemctx );
+					if (!rc)
+						rc = mdb_cursor_get( mc, &key, &data, MDB_SET );
+				}
+				if (rc) break;
 				ptr = (char *)data.mv_data + data.mv_size - sizeof( ID );
 				memcpy( &nid, ptr, sizeof( ID ));
 				/* Get parent's node under grandparent */
@@ -293,6 +325,7 @@ mdb_dn2id(
 	struct berval	*in,
 	ID	*id,
 	ID	*nsubs,
+	ID	*aliases,
 	struct berval	*matched,
 	struct berval	*nmatched )
 {
@@ -371,7 +404,7 @@ mdb_dn2id(
 		if ( matched ) {
 			int rlen;
 			d = data.mv_data;
-			rlen = data.mv_size - sizeof(diskNode) - tmp.bv_len - sizeof(ID);
+			rlen = data.mv_size - sizeof(diskNode) - tmp.bv_len;
 			matched->bv_len += rlen;
 			matched->bv_val -= rlen + 1;
 			ptr = lutil_strcopy( matched->bv_val, d->rdn + tmp.bv_len );
@@ -402,6 +435,24 @@ mdb_dn2id(
 		ptr = (char *)data.mv_data + data.mv_size - sizeof(ID);
 		memcpy( nsubs, ptr, sizeof( ID ));
 	}
+	if ( !rc && aliases ) {
+		MDB_val akey, adata;
+		ID aid;
+
+		akey.mv_size = sizeof(ID);
+		akey.mv_data = &aid;
+		aid = nid;
+
+		rc = mdb_cursor_get( cursor, &akey, &adata, MDB_SET );
+		if ( !rc ) {
+			d = (diskNode*)adata.mv_data;
+			assert ( ( d->nrdnlen[0] & 0x80 )  != 0x80 );
+			ptr = (char *) adata.mv_data + adata.mv_size - 2 * sizeof(ID);
+			memcpy(aliases, ptr, sizeof(ID));
+		}
+		if (mc) /* reset cursor to expected position */
+			rc = mdb_cursor_get( cursor, &key, &data, MDB_GET_BOTH );
+	}
 	if ( !mc )
 		mdb_cursor_close( cursor );
 done:
@@ -883,7 +934,7 @@ mdb_dn2id_walk(
 			isc->nrdns[n].bv_len = ((d->nrdnlen[0] & 0x7f) << 8) | d->nrdnlen[1];
 			isc->nrdns[n].bv_val = d->nrdn;
 			isc->rdns[n].bv_val = d->nrdn+isc->nrdns[n].bv_len+1;
-			isc->rdns[n].bv_len = data.mv_size - sizeof(diskNode) - isc->nrdns[n].bv_len - sizeof(ID);
+			isc->rdns[n].bv_len = data.mv_size - sizeof(diskNode) - isc->nrdns[n].bv_len;
 			/* return this ID to caller */
 			if ( !isc->nscope )
 				break;
diff --git a/servers/slapd/back-mdb/filterindex.c b/servers/slapd/back-mdb/filterindex.c
index b71f0d39d..04cf72912 100644
--- a/servers/slapd/back-mdb/filterindex.c
+++ b/servers/slapd/back-mdb/filterindex.c
@@ -514,7 +514,8 @@ ext_candidates(
 		MDB_IDL_ZERO( ids );
 		if ( mra->ma_rule == slap_schema.si_mr_distinguishedNameMatch ) {
 base:
-			rc = mdb_dn2id( op, rtxn, NULL, &mra->ma_value, &id, NULL, NULL, NULL );
+			rc = mdb_dn2id( op, rtxn, NULL, &mra->ma_value, &id, NULL,
+                            NULL, NULL, NULL );
 			if ( rc == MDB_SUCCESS ) {
 				mdb_idl_insert( ids, id );
 			}
@@ -715,7 +716,8 @@ equality_candidates(
 
 	if ( ava->aa_desc == slap_schema.si_ad_entryDN ) {
 		ID id;
-		rc = mdb_dn2id( op, rtxn, NULL, &ava->aa_value, &id, NULL, NULL, NULL );
+		rc = mdb_dn2id( op, rtxn, NULL, &ava->aa_value, &id, NULL, NULL,
+                        NULL, NULL );
 		if ( rc == LDAP_SUCCESS ) {
 			/* exactly one ID can match */
 			ids[0] = 1;
diff --git a/servers/slapd/back-mdb/id2entry.c b/servers/slapd/back-mdb/id2entry.c
index 8899a56b3..cbaaabc8b 100644
--- a/servers/slapd/back-mdb/id2entry.c
+++ b/servers/slapd/back-mdb/id2entry.c
@@ -600,7 +600,7 @@ int mdb_entry_get(
 	txn = moi->moi_txn;
 
 	/* can we find entry */
-	rc = mdb_dn2entry( op, txn, NULL, ndn, &e, NULL, 0 );
+	rc = mdb_dn2entry( op, txn, NULL, ndn, &e, NULL, NULL, 0 );
 	switch( rc ) {
 	case MDB_NOTFOUND:
 	case 0:
diff --git a/servers/slapd/back-mdb/modify.c b/servers/slapd/back-mdb/modify.c
index 3049e8a87..d37a2b382 100644
--- a/servers/slapd/back-mdb/modify.c
+++ b/servers/slapd/back-mdb/modify.c
@@ -596,7 +596,7 @@ mdb_modify( Operation *op, SlapReply *rs )
 	}
 
 	/* get entry or ancestor */
-	rs->sr_err = mdb_dn2entry( op, txn, NULL, &op->o_req_ndn, &e, NULL, 1 );
+	rs->sr_err = mdb_dn2entry( op, txn, NULL, &op->o_req_ndn, &e, NULL, NULL, 1 );
 
 	if ( rs->sr_err != 0 ) {
 		Debug( LDAP_DEBUG_TRACE,
diff --git a/servers/slapd/back-mdb/modrdn.c b/servers/slapd/back-mdb/modrdn.c
index d9a880f0a..5bc760afb 100644
--- a/servers/slapd/back-mdb/modrdn.c
+++ b/servers/slapd/back-mdb/modrdn.c
@@ -46,7 +46,7 @@ mdb_modrdn( Operation	*op, SlapReply *rs )
 
 	int		manageDSAit = get_manageDSAit( op );
 
-	ID nid, nsubs;
+	ID nid, nsubs, aliases;
 	LDAPControl **preread_ctrl = NULL;
 	LDAPControl **postread_ctrl = NULL;
 	LDAPControl *ctrls[SLAP_MAX_RESPONSE_CONTROLS];
@@ -108,7 +108,7 @@ mdb_modrdn( Operation	*op, SlapReply *rs )
 		rs->sr_text = "DN cursor_open failed";
 		goto return_results;
 	}
-	rs->sr_err = mdb_dn2entry( op, txn, mc, &p_ndn, &p, NULL, 0 );
+	rs->sr_err = mdb_dn2entry( op, txn, mc, &p_ndn, &p, NULL, NULL, 0 );
 	switch( rs->sr_err ) {
 	case MDB_NOTFOUND:
 		Debug( LDAP_DEBUG_TRACE, LDAP_XSTRING(mdb_modrdn)
@@ -162,7 +162,8 @@ mdb_modrdn( Operation	*op, SlapReply *rs )
 		p_dn.bv_val, 0, 0 );
 
 	/* get entry */
-	rs->sr_err = mdb_dn2entry( op, txn, mc, &op->o_req_ndn, &e, &nsubs, 0 );
+	rs->sr_err = mdb_dn2entry( op, txn, mc, &op->o_req_ndn, &e, &nsubs,
+							   &aliases, 0 );
 	switch( rs->sr_err ) {
 	case MDB_NOTFOUND:
 		e = p;
@@ -284,7 +285,7 @@ mdb_modrdn( Operation	*op, SlapReply *rs )
 				goto return_results;
 			}
 			/* Get Entry with dn=newSuperior. Does newSuperior exist? */
-			rs->sr_err = mdb_dn2entry( op, txn, NULL, np_ndn, &np, NULL, 0 );
+			rs->sr_err = mdb_dn2entry( op, txn, NULL, np_ndn, &np, NULL, NULL, 0 );
 
 			switch( rs->sr_err ) {
 			case 0:
@@ -395,7 +396,8 @@ mdb_modrdn( Operation	*op, SlapReply *rs )
 		new_ndn.bv_val, 0, 0 );
 
 	/* Shortcut the search */
-	rs->sr_err = mdb_dn2id ( op, txn, NULL, &new_ndn, &nid, NULL, NULL, NULL );
+	rs->sr_err = mdb_dn2id ( op, txn, NULL, &new_ndn, &nid, NULL, NULL, NULL,
+							 NULL );
 	switch( rs->sr_err ) {
 	case MDB_NOTFOUND:
 		break;
@@ -436,7 +438,7 @@ mdb_modrdn( Operation	*op, SlapReply *rs )
 	 * If moving to a new parent, must delete current subtree count,
 	 * otherwise leave it unchanged since we'll be adding it right back.
 	 */
-	rs->sr_err = mdb_dn2id_delete( op, mc, e->e_id, np ? nsubs : 0 );
+	rs->sr_err = mdb_dn2id_delete( op, mc, e->e_id, np ? nsubs : 0, aliases);
 	if ( rs->sr_err != 0 ) {
 		Debug(LDAP_DEBUG_TRACE,
 			"<=- " LDAP_XSTRING(mdb_modrdn)
@@ -455,7 +457,7 @@ mdb_modrdn( Operation	*op, SlapReply *rs )
 
 	/* add new DN */
 	rs->sr_err = mdb_dn2id_add( op, mc, mc, np ? np->e_id : p->e_id,
-		nsubs, np != NULL, &dummy );
+		nsubs, np != NULL, aliases, &dummy );
 	if ( rs->sr_err != 0 ) {
 		Debug(LDAP_DEBUG_TRACE,
 			"<=- " LDAP_XSTRING(mdb_modrdn)
diff --git a/servers/slapd/back-mdb/proto-mdb.h b/servers/slapd/back-mdb/proto-mdb.h
index 126eaf0b3..055001cfe 100644
--- a/servers/slapd/back-mdb/proto-mdb.h
+++ b/servers/slapd/back-mdb/proto-mdb.h
@@ -60,7 +60,7 @@ int mdb_back_init_cf( BackendInfo *bi );
  */
 
 int mdb_dn2entry LDAP_P(( Operation *op, MDB_txn *tid, MDB_cursor *mc,
-	struct berval *dn, Entry **e, ID *nsubs, int matched ));
+	struct berval *dn, Entry **e, ID *nsubs, ID *aliases, int matched ));
 
 /*
  * dn2id.c
@@ -73,6 +73,7 @@ int mdb_dn2id(
 	struct berval *ndn,
 	ID *id,
 	ID *nsubs,
+	ID *aliases,
 	struct berval *matched,
 	struct berval *nmatched );
 
@@ -83,13 +84,15 @@ int mdb_dn2id_add(
 	ID pid,
 	ID nsubs,
 	int upsub,
+	ID naliases,
 	Entry *e );
 
 int mdb_dn2id_delete(
 	Operation *op,
 	MDB_cursor *mc,
 	ID id,
-	ID nsubs );
+	ID nsubs,
+	ID naliases );
 
 int mdb_dn2id_children(
 	Operation *op,
diff --git a/servers/slapd/back-mdb/search.c b/servers/slapd/back-mdb/search.c
index dc7b33a78..1a94fb3ab 100644
--- a/servers/slapd/back-mdb/search.c
+++ b/servers/slapd/back-mdb/search.c
@@ -98,7 +98,7 @@ static Entry * deref_base (
 			break;
 		}
 
-		rs->sr_err = mdb_dn2entry( op, txn, NULL, &ndn, &e, NULL, 0 );
+		rs->sr_err = mdb_dn2entry( op, txn, NULL, &ndn, &e, NULL, NULL, 0 );
 		if (rs->sr_err) {
 			rs->sr_err = LDAP_ALIAS_PROBLEM;
 			rs->sr_text = "aliasedObject not found";
@@ -414,7 +414,7 @@ int
 mdb_search( Operation *op, SlapReply *rs )
 {
 	struct mdb_info *mdb = (struct mdb_info *) op->o_bd->be_private;
-	ID		id, cursor, nsubs, ncand, cscope;
+	ID		id, cursor, nsubs, ncand, cscope, aliases;
 	ID		lastid = NOID;
 	ID		candidates[MDB_IDL_UM_SIZE];
 	ID		iscopes[MDB_IDL_DB_SIZE];
@@ -477,7 +477,8 @@ mdb_search( Operation *op, SlapReply *rs )
 	}
 dn2entry_retry:
 	/* get entry with reader lock */
-	rs->sr_err = mdb_dn2entry( op, ltid, mcd, &op->o_req_ndn, &e, &nsubs, 1 );
+	rs->sr_err = mdb_dn2entry( op, ltid, mcd, &op->o_req_ndn, &e,
+                               &nsubs, &aliases, 1 );
 
 	switch(rs->sr_err) {
 	case MDB_NOTFOUND:
diff --git a/servers/slapd/back-mdb/tools.c b/servers/slapd/back-mdb/tools.c
index b5f8bccb7..217538b62 100644
--- a/servers/slapd/back-mdb/tools.c
+++ b/servers/slapd/back-mdb/tools.c
@@ -343,7 +343,7 @@ ID mdb_tool_dn2id_get(
 	op.o_tmpmemctx = NULL;
 	op.o_tmpmfuncs = &ch_mfuncs;
 
-	rc = mdb_dn2id( &op, mdb_tool_txn, NULL, dn, &id, NULL, NULL, NULL );
+	rc = mdb_dn2id( &op, mdb_tool_txn, NULL, dn, &id, NULL, NULL, NULL, NULL );
 	if ( rc == MDB_NOTFOUND )
 		return NOID;
 
@@ -464,7 +464,7 @@ static int mdb_tool_next_id(
 		return 0;
 	}
 
-	rc = mdb_dn2id( op, tid, mcp, &ndn, &id, NULL, NULL, &nmatched );
+	rc = mdb_dn2id( op, tid, mcp, &ndn, &id, NULL, NULL, NULL, &nmatched );
 	if ( rc == MDB_NOTFOUND ) {
 		if ( !be_issuffix( op->o_bd, &ndn ) ) {
 			ID eid = e->e_id;
@@ -499,7 +499,8 @@ static int mdb_tool_next_id(
 			"=> mdb_tool_next_id: %s\n", text->bv_val, 0, 0 );
 			return rc;
 		}
-		rc = mdb_dn2id_add( op, mcp, mcd, pid, 1, 1, e );
+		rc = mdb_dn2id_add( op, mcp, mcd, pid, 1, 1,
+							is_entry_alias(e) ? 1 : 0, e );
 		if ( rc ) {
 			snprintf( text->bv_val, text->bv_len,
 				"dn2id_add failed: %s (%d)",
@@ -1109,7 +1110,7 @@ int mdb_tool_entry_delete(
 	op.o_tmpmemctx = NULL;
 	op.o_tmpmfuncs = &ch_mfuncs;
 
-	rc = mdb_dn2entry( &op, mdb_tool_txn, cursor, ndn, &e, NULL, 0 );
+	rc = mdb_dn2entry( &op, mdb_tool_txn, cursor, ndn, &e, NULL, NULL, 0 );
 	if( rc != 0 ) {
 		snprintf( text->bv_val, text->bv_len,
 			"dn2entry failed: %s (%d)",
@@ -1143,7 +1144,7 @@ int mdb_tool_entry_delete(
 	}
 
 	/* delete from dn2id */
-	rc = mdb_dn2id_delete( &op, cursor, e->e_id, 1 );
+	rc = mdb_dn2id_delete( &op, cursor, e->e_id, 1,  is_entry_alias(e) ? 1 : 0 );
 	if( rc != 0 ) {
 		snprintf( text->bv_val, text->bv_len,
 				"dn2id_delete failed: err=%d", rc );
-- 
2.17.1

